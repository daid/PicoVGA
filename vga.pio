.define public VGA_PIXELS 240
.define public VGA_BUFFER_SIZE VGA_PIXELS + 3
.define public VGA_PIXCLOCK_DIV 5
.define public VGA_IRQ_START_LINE 5

.define public VGA_VIDEO_LINE_COUNT 480
.define public VGA_FRONT_LINE_COUNT 11
.define public VGA_SYNC_LINE_COUNT 2
.define public VGA_BACK_LINE_COUNT 31
.define public VGA_TOTAL_LINE_COUNT (VGA_VIDEO_LINE_COUNT + VGA_FRONT_LINE_COUNT + VGA_SYNC_LINE_COUNT + VGA_BACK_LINE_COUNT)

; vga sync, generates HSYNC and VSYNC signals.
; We always can generate HSYNC, so that's generated with SET instructions
; We conditionally want to generate VSYNC, so that we let depend on an input word.

; A full line is:
;  640: pixels
;  16: front
;  96: hsync
;  48: back

; There are 4 types of lines: (all lines always assert hsync at the right time)
;  vsync line: during the whole line, vsync is asserted (low)
;  inactive line: during the whole line, color lines are black (same as vsync line)
;  static line: all pixels have the same color, after that black
;  pixel line: 40 static pixels, 240 dynamic pixels, 40 static pixels, black
; We run a PCLOCK, and generate 1 pixel per two cycles. Allowing for 320 pixels per line.
.program vga
.side_set 1 ; HBlank as sideset pin.
    out y   32               side 1 ; Get the value 240 into y. We never change it after this.
    out isr 32               side 1 ; Get the value ??? into isr. We never change it after this.
.wrap_target
start: ; We are still in the back portion of a line, get the data we need for the next line.
    ; [delay=0]
    out x 8                  side 1 ; get the type of line.
    jmp x-- blankLine        side 1 ; type != 0, blank line with or without VBLANK
    ; type = 0, pixel data line
    nop                      side 1
    set pins 1               side 1 ; end vblank, if there was a VBLANK active
    ; [delay=4] make sure back porch is finished.

    out pins 8  [15]         side 1 ; write the pins for the first 40 pixels
    nop         [15]         side 1 
    nop         [15]         side 1 
    nop         [15]         side 1 
    mov x y     [15]         side 1 ; get the value 240 into x, we write 241 pixels, last pixel should be the value for the last 40 pixels.
    ; [delay=80]
pixelLoop:
    out pins 8               side 1 ; write a pixel
    jmp x-- pixelLoop        side 1

    ; We get here with the first pixel of the trailing static pixels written, so just delay and clear the pixels.
    set x 3 [13]             side 1
trailingPixelsLoop:
    jmp x-- trailingPixelsLoop [15] side 1
    ; [delay=78]
startFront:
    mov pins null [15]       side 1 ; goto black, start of the front
    ; [delay=16] ;end of front, start of hsync
    set x 4 [15]             side 0
hsyncLoop:
    jmp x-- hsyncLoop [15]   side 0
    ; [delay=96] ;end of hsync, start of back
    nop [15]                 side 1
    nop [15]                 side 1
    nop [11]                 side 1
    ; [delay=48-start_cycles=4]
.wrap

blankLine:
    jmp x-- vblankLine       side 1 ; type = 2+, blank line with VBLANK
    set pins 1               side 1 ; release VBLANK
    mov x isr                side 1 ; We need 1 extra cycle to match length with the other line options, and so the pixel data starts after this
blankLineLoop:
    jmp x-- blankLineLoop    side 1
    jmp startFront           side 1
    ; [delay=640]

vblankLine:
    set pins 0               side 1 ; assert VBLANK, after this instruction the pixel data starts.
    mov x isr                side 1
vblankLineLoop:
    jmp x-- vblankLineLoop   side 1
    jmp startFront           side 1
    ; [delay=640]


% c-sdk {
void vga_program_init(PIO pio, uint sm, uint offset, uint vblank_pin, uint hblank_pin, uint color_pin_start) {
    pio_gpio_init(pio, vblank_pin);
    pio_gpio_init(pio, hblank_pin);
    for(uint n=0; n<6; n++)
        pio_gpio_init(pio, color_pin_start + n);
    pio_sm_set_consecutive_pindirs(pio, sm, vblank_pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, hblank_pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, color_pin_start, 6, true);
    pio_sm_config c = vga_program_get_default_config(offset);
    sm_config_set_out_pins(&c, color_pin_start, 6);
    sm_config_set_set_pins(&c, vblank_pin, 1);
    sm_config_set_sideset_pins(&c, hblank_pin);
    sm_config_set_clkdiv_int_frac(&c, VGA_PIXCLOCK_DIV, 0);
    sm_config_set_out_shift(&c, false, true, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    pio_sm_init(pio, sm, offset, &c);
    pio->txf[sm] = VGA_PIXELS;
    pio->txf[sm] = 640 - 3;
}
%}
